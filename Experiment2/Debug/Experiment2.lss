
Experiment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115e  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1e  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000664  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000656  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049a  00000000  00000000  00002fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ec e1       	ldi	r30, 0x1C	; 28
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 30       	cpi	r26, 0x02	; 2
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a2 e0       	ldi	r26, 0x02	; 2
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 30       	cpi	r26, 0x0B	; 11
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 102:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_Output_Init>:
#include "GPIO_Outputs.h"

void GPIO_Output_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <GPIO_Output_Set>:


void GPIO_Output_Set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 114:	fc 01       	movw	r30, r24
 116:	22 81       	ldd	r18, Z+2	; 0x02
 118:	62 2b       	or	r22, r18
 11a:	62 83       	std	Z+2, r22	; 0x02
 11c:	08 95       	ret

0000011e <GPIO_Output_Clear>:
}

void GPIO_Output_Clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
 11e:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	60 95       	com	r22
 124:	69 23       	and	r22, r25
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <main>:

const char test_string[15] PROGMEM = "Hello World!\n\r";

int main(void)
{
	SPI_Master_Init(SPI0, 200000);
 12a:	40 e4       	ldi	r20, 0x40	; 64
 12c:	5d e0       	ldi	r21, 0x0D	; 13
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	8c e4       	ldi	r24, 0x4C	; 76
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Master_Init>
	Send_Command(24, 0xFF00FF00);
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	5f ef       	ldi	r21, 0xFF	; 255
 13e:	ba 01       	movw	r22, r20
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	0e 94 18 01 	call	0x230	; 0x230 <Send_Command>
	
	
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <SPI_Master_Init>:
//error_value=receive_response(5,rec_values);


//rcvd_val = SPI_Transfer(&SPI0, send_val,&error_flag)
uint8_t SPI_Master_Init(volatile SPI_t *SPI_base, uint32_t clock_rate)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	9a 01       	movw	r18, r20
 154:	ab 01       	movw	r20, r22
	uint16_t divider = (F_CPU/F_DIV)/(clock_rate);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	74 e2       	ldi	r23, 0x24	; 36
 15a:	84 ef       	ldi	r24, 0xF4	; 244
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodsi4>
	if (divider<2){
 162:	22 30       	cpi	r18, 0x02	; 2
 164:	31 05       	cpc	r19, r1
 166:	28 f4       	brcc	.+10     	; 0x172 <SPI_Master_Init+0x26>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|0<<0);
 168:	80 e5       	ldi	r24, 0x50	; 80
 16a:	88 83       	st	Y, r24
		SPI_base->SPSR = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	30 c0       	rjmp	.+96     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<4){
 172:	24 30       	cpi	r18, 0x04	; 4
 174:	31 05       	cpc	r19, r1
 176:	20 f4       	brcc	.+8      	; 0x180 <SPI_Master_Init+0x34>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|0<<0);
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	88 83       	st	Y, r24
		SPI_base->SPSR = 0;
 17c:	19 82       	std	Y+1, r1	; 0x01
 17e:	29 c0       	rjmp	.+82     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<8){
 180:	28 30       	cpi	r18, 0x08	; 8
 182:	31 05       	cpc	r19, r1
 184:	28 f4       	brcc	.+10     	; 0x190 <SPI_Master_Init+0x44>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|1<<0);
 186:	81 e5       	ldi	r24, 0x51	; 81
 188:	88 83       	st	Y, r24
		SPI_base->SPSR = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	21 c0       	rjmp	.+66     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<16){
 190:	20 31       	cpi	r18, 0x10	; 16
 192:	31 05       	cpc	r19, r1
 194:	20 f4       	brcc	.+8      	; 0x19e <SPI_Master_Init+0x52>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|1<<0);
 196:	81 e5       	ldi	r24, 0x51	; 81
 198:	88 83       	st	Y, r24
		SPI_base->SPSR = 0;
 19a:	19 82       	std	Y+1, r1	; 0x01
 19c:	1a c0       	rjmp	.+52     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<32){
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	31 05       	cpc	r19, r1
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <SPI_Master_Init+0x62>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|2<<0);
 1a4:	82 e5       	ldi	r24, 0x52	; 82
 1a6:	88 83       	st	Y, r24
		SPI_base->SPSR = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<64){
 1ae:	20 34       	cpi	r18, 0x40	; 64
 1b0:	31 05       	cpc	r19, r1
 1b2:	20 f4       	brcc	.+8      	; 0x1bc <SPI_Master_Init+0x70>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|2<<0);
 1b4:	82 e5       	ldi	r24, 0x52	; 82
 1b6:	88 83       	st	Y, r24
		SPI_base->SPSR = 0;
 1b8:	19 82       	std	Y+1, r1	; 0x01
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else if (divider<128){
 1bc:	20 38       	cpi	r18, 0x80	; 128
 1be:	31 05       	cpc	r19, r1
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <SPI_Master_Init+0x7e>
		SPI_base->SPCR = ((1<<SPE)|(1<<MSTR)|(CPOL_BIT<<CPOL)| (CPHA_BIT<<CPHA)|3<<0);
 1c2:	83 e5       	ldi	r24, 0x53	; 83
 1c4:	88 83       	st	Y, r24
		SPI_base->SPSR = 0;
 1c6:	19 82       	std	Y+1, r1	; 0x01
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <SPI_Master_Init+0x86>
	}
	else{
		return_value = clock_rate_error;
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <return_value>
	}
	if (SPI_base == SPI0){
 1d2:	cc 34       	cpi	r28, 0x4C	; 76
 1d4:	d1 05       	cpc	r29, r1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <SPI_Master_Init+0xa2>
		GPIO_Output_Set(PB, (1<<5));
 1d8:	60 e2       	ldi	r22, 0x20	; 32
 1da:	83 e2       	ldi	r24, 0x23	; 35
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
		GPIO_Output_Init(PB, (1<<5));
 1e2:	60 e2       	ldi	r22, 0x20	; 32
 1e4:	83 e2       	ldi	r24, 0x23	; 35
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <SPI_Master_Init+0xb6>
	}
	else{
		GPIO_Output_Set(PB, (1<<3));
 1ee:	68 e0       	ldi	r22, 0x08	; 8
 1f0:	83 e2       	ldi	r24, 0x23	; 35
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
		GPIO_Output_Init(PB, (1<<3));
 1f8:	68 e0       	ldi	r22, 0x08	; 8
 1fa:	83 e2       	ldi	r24, 0x23	; 35
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
	}
	if(CPOL_BIT == 0){
		GPIO_Output_Clear(PB, (1<<7));
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	83 e2       	ldi	r24, 0x23	; 35
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
		GPIO_Output_Init(PB, (1<<7));
 20c:	60 e8       	ldi	r22, 0x80	; 128
 20e:	83 e2       	ldi	r24, 0x23	; 35
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
		GPIO_Output_Clear(PD, (1<<7));
		GPIO_Output_Init(PD, (1<<7));
	}
	return return_value;
	
}
 216:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <return_value>
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <SPI_Transfer>:


uint8_t SPI_Transfer( volatile SPI_t * SPI_base, uint8_t send_value)
{
 220:	fc 01       	movw	r30, r24
	uint8_t status;
	// First start a transfer by writing send_value to SPDR
	(SPI_base->SPDR) = 0x05;
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	82 83       	std	Z+2, r24	; 0x02
	// Next wait in a loop until SPIF is set
	do
	{
		status= SPI_base->SPSR;
 226:	91 81       	ldd	r25, Z+1	; 0x01
	}while((status&0x80)==0);
 228:	99 23       	and	r25, r25
 22a:	ec f7       	brge	.-6      	; 0x226 <SPI_Transfer+0x6>
	// Then return the value from SPDR
	return SPI_base->SPDR;
 22c:	82 81       	ldd	r24, Z+2	; 0x02
}
 22e:	08 95       	ret

00000230 <Send_Command>:

uint8_t Send_Command ( uint8_t command, uint32_t argument){
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
	uint8_t send_value;
	
	if(command<64)
 23c:	80 34       	cpi	r24, 0x40	; 64
 23e:	88 f4       	brcc	.+34     	; 0x262 <Send_Command+0x32>
 240:	6a 01       	movw	r12, r20
 242:	7b 01       	movw	r14, r22
 244:	d8 2f       	mov	r29, r24
	{
		return_value = no_errors;
 246:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 24a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <return_value>
		send_value = CMD0|command;
 24e:	6d 2f       	mov	r22, r29
 250:	60 64       	ori	r22, 0x40	; 64
		rcvd_val=SPI_Transfer(SD_SPI_port, send_value);
 252:	8c e2       	ldi	r24, 0x2C	; 44
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 10 01 	call	0x220	; 0x220 <SPI_Transfer>
 25a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rcvd_val>
	}
	else{
		return_value = illegal_command;
		return return_value;
	}
	for(uint8_t index=0;index<4;index++)
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <Send_Command+0x70>
		return_value = no_errors;
		send_value = CMD0|command;
		rcvd_val=SPI_Transfer(SD_SPI_port, send_value);
	}
	else{
		return_value = illegal_command;
 262:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <illegal_command>
 266:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <return_value>
		return return_value;
 26a:	2d c0       	rjmp	.+90     	; 0x2c6 <Send_Command+0x96>
	}
	for(uint8_t index=0;index<4;index++)
	{
		send_value=(uint8_t)(argument>>(24-(index*8)));
 26c:	23 e0       	ldi	r18, 0x03	; 3
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	2c 1b       	sub	r18, r28
 272:	31 09       	sbc	r19, r1
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	04 c0       	rjmp	.+8      	; 0x28e <Send_Command+0x5e>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	77 95       	ror	r23
 28c:	67 95       	ror	r22
 28e:	2a 95       	dec	r18
 290:	d2 f7       	brpl	.-12     	; 0x286 <Send_Command+0x56>
		rcvd_val=SPI_Transfer(SD_SPI_port,send_value);
 292:	8c e2       	ldi	r24, 0x2C	; 44
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 10 01 	call	0x220	; 0x220 <SPI_Transfer>
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rcvd_val>
	}
	else{
		return_value = illegal_command;
		return return_value;
	}
	for(uint8_t index=0;index<4;index++)
 29e:	cf 5f       	subi	r28, 0xFF	; 255
 2a0:	c4 30       	cpi	r28, 0x04	; 4
 2a2:	20 f3       	brcs	.-56     	; 0x26c <Send_Command+0x3c>
		send_value=(uint8_t)(argument>>(24-(index*8)));
		rcvd_val=SPI_Transfer(SD_SPI_port,send_value);
	}
	
	// The final byte to send is determined by the CMD_value.
	if(command==CMD0)
 2a4:	d0 34       	cpi	r29, 0x40	; 64
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <Send_Command+0x80>
	{
		send_value=CRC7_CMD0;
	}
	else if(command==CMD8)
 2a8:	d8 34       	cpi	r29, 0x48	; 72
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <Send_Command+0x84>
	{
		send_value=CRC7_CMD8;
 2ac:	67 e8       	ldi	r22, 0x87	; 135
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <Send_Command+0x86>
	}
	
	// The final byte to send is determined by the CMD_value.
	if(command==CMD0)
	{
		send_value=CRC7_CMD0;
 2b0:	65 e9       	ldi	r22, 0x95	; 149
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <Send_Command+0x86>
	{
		send_value=CRC7_CMD8;
	}
	else
	{
		send_value=0x01; // end bit only, CRC7=0
 2b4:	61 e0       	ldi	r22, 0x01	; 1
	}
	rcvd_val=SPI_Transfer(SD_SPI_port,send_value);
 2b6:	8c e2       	ldi	r24, 0x2C	; 44
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 10 01 	call	0x220	; 0x220 <SPI_Transfer>
 2be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rcvd_val>
	// Return the error flag.
	return return_value;
 2c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <return_value>
	
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret

000002d4 <__udivmodsi4>:
 2d4:	a1 e2       	ldi	r26, 0x21	; 33
 2d6:	1a 2e       	mov	r1, r26
 2d8:	aa 1b       	sub	r26, r26
 2da:	bb 1b       	sub	r27, r27
 2dc:	fd 01       	movw	r30, r26
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <__udivmodsi4_ep>

000002e0 <__udivmodsi4_loop>:
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	ee 1f       	adc	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	a2 17       	cp	r26, r18
 2ea:	b3 07       	cpc	r27, r19
 2ec:	e4 07       	cpc	r30, r20
 2ee:	f5 07       	cpc	r31, r21
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <__udivmodsi4_ep>
 2f2:	a2 1b       	sub	r26, r18
 2f4:	b3 0b       	sbc	r27, r19
 2f6:	e4 0b       	sbc	r30, r20
 2f8:	f5 0b       	sbc	r31, r21

000002fa <__udivmodsi4_ep>:
 2fa:	66 1f       	adc	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	1a 94       	dec	r1
 304:	69 f7       	brne	.-38     	; 0x2e0 <__udivmodsi4_loop>
 306:	60 95       	com	r22
 308:	70 95       	com	r23
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
 312:	bd 01       	movw	r22, r26
 314:	cf 01       	movw	r24, r30
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
